version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: api_security_db_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-api_security}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - api_network_prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-api_security}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: api_security_backend_prod
    restart: unless-stopped
    environment:
      # Database configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-api_security}
      
      # Security settings
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      
      # API settings
      HEALTH_CHECK_API_KEY: ${HEALTH_CHECK_API_KEY}
      
      # CORS settings - Update with your domain
      CORS_ORIGINS: ${CORS_ORIGINS}
      
      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-production}
      LOG_LEVEL: ${LOG_LEVEL:-WARNING}
      
      # Session settings
      SESSION_COOKIE_SECURE: ${SESSION_COOKIE_SECURE:-true}
      SESSION_COOKIE_HTTPONLY: ${SESSION_COOKIE_HTTPONLY:-true}
      SESSION_COOKIE_SAMESITE: ${SESSION_COOKIE_SAMESITE:-Strict}
      
      # Rate limiting
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-100}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-900}
      
      # Performance settings
      DB_POOL_SIZE: ${DB_POOL_SIZE:-20}
      DB_MAX_OVERFLOW: ${DB_MAX_OVERFLOW:-30}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - api_network_prod
    volumes:
      - backend_logs_prod:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Next.js Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: api_security_frontend_prod
    restart: unless-stopped
    environment:
      # API configuration - Update with your domain
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_DEFAULT_API_URL: ${NEXT_PUBLIC_DEFAULT_API_URL}
      
      # Next.js settings
      NODE_ENV: ${NODE_ENV:-production}
      NEXT_TELEMETRY_DISABLED: 1
      
      # Build settings - Update with your domain
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - api_network_prod
    volumes:
      - frontend_logs_prod:/var/log/nginx
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: api_security_redis_prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    networks:
      - api_network_prod
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy with SSL (Optional - for SSL termination)
  nginx:
    image: nginx:alpine
    container_name: api_security_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # Mount your SSL certificates here
      - nginx_logs_prod:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - api_network_prod
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data_prod:
    driver: local
  backend_logs_prod:
    driver: local
  frontend_logs_prod:
    driver: local
  redis_data_prod:
    driver: local
  nginx_logs_prod:
    driver: local

networks:
  api_network_prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16 