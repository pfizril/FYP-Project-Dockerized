version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: api_security_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-api_security}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - api_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-api_security}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: api_security_backend
    restart: unless-stopped
    environment:
      # Database configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-secure_password}@db:5432/${POSTGRES_DB:-api_security}
      
      # Security settings
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      
      # API settings
      HEALTH_CHECK_API_KEY: ${HEALTH_CHECK_API_KEY:-health-monitor-key}
      
      # CORS settings
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:80,http://frontend:80}
      
      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-development}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - api_network
    volumes:
      - ./venv-fastapi:/app
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Next.js Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: api_security_frontend
    restart: unless-stopped
    environment:
      # API configuration
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://backend:8000}
      NEXT_PUBLIC_DEFAULT_API_URL: ${NEXT_PUBLIC_DEFAULT_API_URL:-http://backend:8000}
      
      # Next.js settings
      NODE_ENV: ${NODE_ENV:-production}
      NEXT_TELEMETRY_DISABLED: 1
      
      # Build settings
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:80}
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - api_network
    volumes:
      - frontend_logs:/var/log/nginx
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: api_security_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - api_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  backend_logs:
    driver: local
  frontend_logs:
    driver: local
  redis_data:
    driver: local

networks:
  api_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 