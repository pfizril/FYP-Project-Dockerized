version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: api_security_db_dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-api_security_dev}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - api_network_dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-api_security_dev}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # FastAPI Backend (Development with hot-reload)
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: api_security_backend_dev
    restart: unless-stopped
    environment:
      # Database configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-secure_password}@db:5432/${POSTGRES_DB:-api_security_dev}
      
      # Security settings
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      
      # API settings
      HEALTH_CHECK_API_KEY: ${HEALTH_CHECK_API_KEY:-health-monitor-key}
      
      # CORS settings for development
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173,http://frontend:3000,http://127.0.0.1:3000}
      
      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-development}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-DEBUG}
      
      # Development settings
      PYTHONPATH: /app
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - api_network_dev
    volumes:
      # Mount source code for hot-reload
      - ./venv-fastapi:/app
      - backend_logs_dev:/app/logs
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--reload-dir", "/app"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Next.js Frontend (Development with hot-reload)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.dev
    container_name: api_security_frontend_dev
    restart: unless-stopped
    environment:
      # API configuration for development
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      NEXT_PUBLIC_DEFAULT_API_URL: ${NEXT_PUBLIC_DEFAULT_API_URL:-http://localhost:8000}
      
      # Next.js development settings
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_TELEMETRY_DISABLED: 1
      
      # Development settings
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - api_network_dev
    volumes:
      # Mount source code for hot-reload
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
      - frontend_logs_dev:/app/logs
    command: ["pnpm", "dev"]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: api_security_redis_dev
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - api_network_dev
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data_dev:
    driver: local
  backend_logs_dev:
    driver: local
  frontend_logs_dev:
    driver: local
  redis_data_dev:
    driver: local

networks:
  api_network_dev:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16 